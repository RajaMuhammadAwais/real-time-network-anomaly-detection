name: Docs + Version Bot

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  update-docs-and-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install openai pyyaml

      - name: Update version + docs with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_REPO: ${{ github.repository }}
        run: |
          python - <<'PYCODE'
import os, re, glob, yaml
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
repo = os.getenv("GITHUB_REPO")

# --- Step 1: Manage VERSION file ---
version_file = "VERSION"
if os.path.exists(version_file):
    with open(version_file, "r") as f:
        current_version = f.read().strip()
else:
    current_version = "0.0.0"

# bump patch version (X.Y.Z â†’ X.Y.(Z+1))
major, minor, patch = map(int, current_version.split("."))
new_version = f"{major}.{minor}.{patch+1}"

with open(version_file, "w") as f:
    f.write(new_version)

# --- Step 2: Collect workflow badges ---
badges, cla_required = [], False
for path in glob.glob(".github/workflows/*.yml"):
    with open(path, "r", encoding="utf-8") as f:
        try:
            wf = yaml.safe_load(f)
        except Exception:
            continue
    if not wf or "name" not in wf:
        continue
    name = wf["name"]
    badge_url = f"https://github.com/{repo}/actions/workflows/{os.path.basename(path)}/badge.svg"
    wf_url = f"https://github.com/{repo}/actions/workflows/{os.path.basename(path)}"
    badges.append(f"[![{name}]({badge_url})]({wf_url})")
    if "cla" in path.lower():
        cla_required = True

# version + license badges
badges.append(f"![Version](https://img.shields.io/badge/version-{new_version}-blue.svg)")
badges.append("[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)")

badges_block = "\n".join(badges)

# --- Step 3: Update README.md ---
with open("README.md", "r", encoding="utf-8") as f:
    content = f.read()

prompt_readme = f"""
Insert or update these badges in README.md between <!-- badges:start --> and <!-- badges:end -->:

{badges_block}

Also ensure a "License" section exists linking to LICENSE.
Do not change any other content.
README content:
{content}
"""

response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages=[{"role": "user", "content": prompt_readme}],
    temperature=0
)
updated_readme = response.choices[0].message.content
with open("README.md", "w", encoding="utf-8") as f:
    f.write(updated_readme)

# --- Step 4: CONTRIBUTING.md if missing ---
if not os.path.exists("CONTRIBUTING.md"):
    prompt_contrib = f"""
Generate a CONTRIBUTING.md for {repo}.
Include:
- Fork â†’ branch â†’ PR process
- Running tests before submitting
- Reference LICENSE (MIT)
- Filing issues via GitHub
"""
    if cla_required:
        prompt_contrib += "\nAlso mention contributors must sign a CLA before merging PRs."

    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "user", "content": prompt_contrib}],
        temperature=0
    )
    with open("CONTRIBUTING.md", "w", encoding="utf-8") as f:
        f.write(response.choices[0].message.content)

print(f"âœ… Docs updated, new version {new_version}")
PYCODE

      - name: Commit docs + version bump
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ðŸ¤– Auto-update docs & bump version"
          branch: main
