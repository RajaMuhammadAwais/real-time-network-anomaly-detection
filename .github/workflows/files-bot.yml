name: OpenAI Repo Bot

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, edited]

jobs:
  repo-bot:
    name: AI Maintainer Bot
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install openai PyGithub

      - name: Run AI Maintainer
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python <<'EOF'
          import os, json, subprocess
          from pathlib import Path
          import openai
          from github import Github

          openai.api_key = os.getenv("OPENAI_API_KEY")
          gh = Github(os.getenv("GITHUB_TOKEN"))
          repo = gh.get_repo(os.getenv("GITHUB_REPOSITORY"))

          event_name = os.getenv("GITHUB_EVENT_NAME")
          event_path = os.getenv("GITHUB_EVENT_PATH")

          # ---------- 1. Ensure Community Files Exist ----------
          REQUIRED_FILES = {
              "CONTRIBUTING.md": "Write a professional contributing guide for a Python Flask + ML project with tests and MIT license.",
              "CODE_OF_CONDUCT.md": "Write a Contributor Covenant Code of Conduct for an open source project.",
              "LICENSE": "Generate an MIT License text."
          }

          repo_path = Path(".")

          def generate_file(name, prompt):
              response = openai.ChatCompletion.create(
                  model="gpt-3.5-turbo",
                  messages=[
                      {"role": "system", "content": "You are an expert open-source maintainer."},
                      {"role": "user", "content": prompt}
                  ]
              )
              content = response["choices"][0]["message"]["content"]
              with open(repo_path / name, "w") as f:
                  f.write(content.strip())
              print(f"âœ… Generated {name}")

          missing = []
          for file, prompt in REQUIRED_FILES.items():
              if not (repo_path / file).exists():
                  generate_file(file, prompt)
                  missing.append(file)

          if missing:
              subprocess.run(["git", "config", "--global", "user.email", "bot@github.com"])
              subprocess.run(["git", "config", "--global", "user.name", "OpenAI Bot"])
              subprocess.run(["git", "checkout", "-b", "bot/docs-update"])
              subprocess.run(["git", "add", "."])
              subprocess.run(["git", "commit", "-m", "chore: add missing community files"])
              subprocess.run(["git", "push", "origin", "bot/docs-update"])
              print("ðŸ“Œ Created PR branch with missing docs.")

          # ---------- 2. Handle Issues ----------
          if event_name == "issues":
              with open(event_path, "r") as f:
                  event = json.load(f)
              issue = repo.get_issue(number=event["issue"]["number"])
              title = event["issue"]["title"]
              body = event["issue"]["body"] or ""

              prompt = f"Categorize this GitHub issue:\nTitle: {title}\nBody: {body}\nPossible labels: bug, enhancement, good first issue, help wanted. Suggest best 2."
              response = openai.ChatCompletion.create(
                  model="gpt-3.5-turbo",
                  messages=[{"role": "system", "content": "You are an expert GitHub triage bot."},
                            {"role": "user", "content": prompt}]
              )
              labels_text = response["choices"][0]["message"]["content"]
              suggested = [lbl.strip() for lbl in labels_text.split(",") if lbl.strip()]
              print(f"ðŸ¤– Suggested labels: {suggested}")

              for lbl in suggested:
                  try:
                      issue.add_to_labels(lbl)
                  except:
                      pass

              issue.create_comment(f"ðŸ¤– AI Suggestion: This issue seems related to `{', '.join(suggested)}`.")

          # ---------- 3. Handle Pull Requests ----------
          if event_name == "pull_request":
              with open(event_path, "r") as f:
                  event = json.load(f)
              pr = repo.get_pull(number=event["pull_request"]["number"])
              title = event["pull_request"]["title"]
              body = event["pull_request"]["body"] or ""

              prompt = f"Summarize this pull request in 3 bullet points:\nTitle: {title}\nBody: {body}"
              response = openai.ChatCompletion.create(
                  model="gpt-3.5-turbo",
                  messages=[{"role": "system", "content": "You are an expert GitHub PR reviewer."},
                            {"role": "user", "content": prompt}]
              )
              summary = response["choices"][0]["message"]["content"]

              pr.create_issue_comment(f"ðŸ¤– AI Summary of this PR:\n{summary}")
              print("âœ… Posted AI summary for PR")
          EOF
