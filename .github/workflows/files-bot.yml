name: OpenAI Repo Bot

on:
  schedule:
    - cron: "0 6 * * *"
  workflow_dispatch:

permissions:
  contents: write      # allow creating commits/branches
  pull-requests: write # allow opening PRs

jobs:
  repo-bot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0    # so we can push new branches

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install openai PyGithub

      - name: Run AI Maintainer
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python <<'EOF'
          import os, subprocess
          from pathlib import Path
          import openai
          from github import Github

          openai.api_key = os.getenv("OPENAI_API_KEY")
          gh = Github(os.getenv("GITHUB_TOKEN"))
          repo = gh.get_repo(os.getenv("GITHUB_REPOSITORY"))

          REQUIRED_FILES = {
              "CONTRIBUTING.md": "Write a professional contributing guide for a Python Flask + ML project with tests and MIT license.",
              "CODE_OF_CONDUCT.md": "Write a Contributor Covenant Code of Conduct for an open source project.",
              "LICENSE": "Generate an MIT License text."
          }

          repo_path = Path(".")

          def generate_file(name, prompt):
              response = openai.ChatCompletion.create(
                  model="gpt-3.5-turbo",
                  messages=[
                      {"role": "system", "content": "You are an expert open-source maintainer."},
                      {"role": "user", "content": prompt}
                  ]
              )
              content = response["choices"][0]["message"]["content"]
              with open(repo_path / name, "w") as f:
                  f.write(content.strip())
              print(f"✅ Generated {name}")

          missing = []
          for file, prompt in REQUIRED_FILES.items():
              if not (repo_path / file).exists():
                  generate_file(file, prompt)
                  missing.append(file)

          if missing:
              branch = "bot/docs-update"

              # Setup Git identity
              subprocess.run(["git", "config", "--global", "user.email", "bot@github.com"])
              subprocess.run(["git", "config", "--global", "user.name", "OpenAI Bot"])

              # Create new branch
              subprocess.run(["git", "checkout", "-b", branch])

              # Stage + Commit
              subprocess.run(["git", "add", "."])
              subprocess.run(["git", "commit", "-m", f"chore: add missing community files ({', '.join(missing)})"])

              # Push branch (force update if exists)
              subprocess.run(["git", "push", "-f", "origin", branch])

              # Check if PR already exists
              prs = repo.get_pulls(state="open", head=f"{repo.owner.login}:{branch}")
              if prs.totalCount == 0:
                  pr_title = f"chore: add missing community files ({', '.join(missing)})"
                  pr_body = f"This PR was automatically generated by the OpenAI Bot to add missing files: {', '.join(missing)}."
                  repo.create_pull(title=pr_title, body=pr_body, head=branch, base="main")
                  print("📌 Created PR branch with missing docs.")
              else:
                  print("ℹ️ PR already exists for this branch.")
          else:
              print("🎉 All required community files already exist.")
          EOF
